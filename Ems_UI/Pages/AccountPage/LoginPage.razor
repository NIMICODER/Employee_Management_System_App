@page "/identity/account/login"
@using Ems_UI.Pages.OtherPages
@using Syncfusion.Blazor.Popups
@layout AuthenticationLayout
@inject SfDialogService DialogService

<div class="container">
    <div class="row">
        <div class="col-lg-4"></div>
        <div class="col-lg-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="card bg-dark" style="opacity:0.5; margin-top:50%; border-radius:10px; color:white; font-weight:bold">
                    <div class="card-header text-center fs-5 mb-2">Login</div>
                    
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                <img style="border-radius:28px" src="../images/companylogo.jpg" height="50" width="50" />
                            </div>
                             <div class="col-lg-4 col-md-4 col-sm-4"></div>
                        </div>
                    </div>
                        <div class="card-body">
                            <div class="form-group mt-3">
                                <label class="form-label">Email</label>
                                <InputText @bind-Value="User.Email" class="form-control"></InputText>
                            </div>

                             <div class="form-group mt-3">
                                 <label class="form-label">Password</label>
                                 <input type="password" @bind="User.Password" class="form-control"></input>
                             </div>

                             <div class="form-group mt-3">
                                 @if (ShowLoadingButton)
                                {
                                    <Spinner></Spinner>
                                }
                                else
                                {
                                    <button class="bt btn-outline-primary float-end" type="submit">Login</button>
                                }

                           

                             </div>

                        </div>
                        <div class="card-footer">
                            <span class="text-center">
                                Not Registered?
                                <a class="btn-link" href="identity/account/register">Sign Up</a>
                            </span>
                            <ValidationSummary />
                        </div>
                    
                </div>
            </EditForm>
        </div>
         <div class="col-lg-4"></div>
    </div>
</div>

@code{
    public bool ShowLoadingButton { get; set; } = false;
    Login User = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleLogin(){
        ShowLoadingButton = true;
        var result = await authenticationService.LoginAccountAsync(User);
        if (result.Status)
        {
            await DisplayDialog(result.Message, "Success");
            var customerAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customerAuthStateProvider.UpdateAuthenticationState(new UserSession()
                {
                    Token = result.Token,
                    RefreshToken = result.RefreshToken
                });
            NavManager.NavigateTo("/", forceLoad: true); 
        }
        else
        {
            await DisplayDialog(result.Message, "Alert");
        }
        ShowLoadingButton = false;
    }

    private async Task DisplayDialog(string contennt, string title){
        await DialogService.AlertAsync(contennt, title);
    }

    private async Task CheckUserAuthentication(){
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
            NavManager.NavigateTo("/home/dashboard");
    }
}